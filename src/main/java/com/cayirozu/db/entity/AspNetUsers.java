package com.cayirozu.db.entity;
// Generated 19 Ara 2020 06:35:03 by Hibernate Tools 5.2.12.Final

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * AspNetUsers generated by hbm2java
 */
@Entity
@Table(name = "AspNetUsers", schema = "dbo", catalog = "onlineaccounting", uniqueConstraints = @UniqueConstraint(columnNames = "NormalizedUserName"))
public class AspNetUsers implements java.io.Serializable {

	private Serializable id;
	private Serializable userName;
	private Serializable normalizedUserName;
	private Serializable email;
	private Serializable normalizedEmail;
	private boolean emailConfirmed;
	private Serializable passwordHash;
	private Serializable securityStamp;
	private Serializable concurrencyStamp;
	private Serializable phoneNumber;
	private boolean phoneNumberConfirmed;
	private boolean twoFactorEnabled;
	private Serializable lockoutEnd;
	private boolean lockoutEnabled;
	private int accessFailedCount;
	private Set<AspNetUserLogins> aspNetUserLogins = new HashSet<>(0);
	private Set<AspNetUserClaims> aspNetUserClaims = new HashSet<>(0);
	private Set<AspNetRoles> aspNetRoles = new HashSet<>(0);

	public AspNetUsers() {
	}

	public AspNetUsers(Serializable id, boolean emailConfirmed, boolean phoneNumberConfirmed, boolean twoFactorEnabled,
			boolean lockoutEnabled, int accessFailedCount) {
		this.id = id;
		this.emailConfirmed = emailConfirmed;
		this.phoneNumberConfirmed = phoneNumberConfirmed;
		this.twoFactorEnabled = twoFactorEnabled;
		this.lockoutEnabled = lockoutEnabled;
		this.accessFailedCount = accessFailedCount;
	}

	public AspNetUsers(Serializable id, Serializable userName, Serializable normalizedUserName, Serializable email,
			Serializable normalizedEmail, boolean emailConfirmed, Serializable passwordHash, Serializable securityStamp,
			Serializable concurrencyStamp, Serializable phoneNumber, boolean phoneNumberConfirmed,
			boolean twoFactorEnabled, Serializable lockoutEnd, boolean lockoutEnabled, int accessFailedCount,
			Set<AspNetUserLogins> aspNetUserLogins, Set<AspNetUserClaims> aspNetUserClaims, Set<AspNetRoles> aspNetRoles) {
		this.id = id;
		this.userName = userName;
		this.normalizedUserName = normalizedUserName;
		this.email = email;
		this.normalizedEmail = normalizedEmail;
		this.emailConfirmed = emailConfirmed;
		this.passwordHash = passwordHash;
		this.securityStamp = securityStamp;
		this.concurrencyStamp = concurrencyStamp;
		this.phoneNumber = phoneNumber;
		this.phoneNumberConfirmed = phoneNumberConfirmed;
		this.twoFactorEnabled = twoFactorEnabled;
		this.lockoutEnd = lockoutEnd;
		this.lockoutEnabled = lockoutEnabled;
		this.accessFailedCount = accessFailedCount;
		this.aspNetUserLogins = aspNetUserLogins;
		this.aspNetUserClaims = aspNetUserClaims;
		this.aspNetRoles = aspNetRoles;
	}

	@Id

	@Column(name = "Id", unique = true, nullable = false)
	public Serializable getId() {
		return this.id;
	}

	public void setId(Serializable id) {
		this.id = id;
	}

	@Column(name = "UserName")
	public Serializable getUserName() {
		return this.userName;
	}

	public void setUserName(Serializable userName) {
		this.userName = userName;
	}

	@Column(name = "NormalizedUserName", unique = true)
	public Serializable getNormalizedUserName() {
		return this.normalizedUserName;
	}

	public void setNormalizedUserName(Serializable normalizedUserName) {
		this.normalizedUserName = normalizedUserName;
	}

	@Column(name = "Email")
	public Serializable getEmail() {
		return this.email;
	}

	public void setEmail(Serializable email) {
		this.email = email;
	}

	@Column(name = "NormalizedEmail")
	public Serializable getNormalizedEmail() {
		return this.normalizedEmail;
	}

	public void setNormalizedEmail(Serializable normalizedEmail) {
		this.normalizedEmail = normalizedEmail;
	}

	@Column(name = "EmailConfirmed", nullable = false)
	public boolean isEmailConfirmed() {
		return this.emailConfirmed;
	}

	public void setEmailConfirmed(boolean emailConfirmed) {
		this.emailConfirmed = emailConfirmed;
	}

	@Column(name = "PasswordHash")
	public Serializable getPasswordHash() {
		return this.passwordHash;
	}

	public void setPasswordHash(Serializable passwordHash) {
		this.passwordHash = passwordHash;
	}

	@Column(name = "SecurityStamp")
	public Serializable getSecurityStamp() {
		return this.securityStamp;
	}

	public void setSecurityStamp(Serializable securityStamp) {
		this.securityStamp = securityStamp;
	}

	@Column(name = "ConcurrencyStamp")
	public Serializable getConcurrencyStamp() {
		return this.concurrencyStamp;
	}

	public void setConcurrencyStamp(Serializable concurrencyStamp) {
		this.concurrencyStamp = concurrencyStamp;
	}

	@Column(name = "PhoneNumber")
	public Serializable getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(Serializable phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	@Column(name = "PhoneNumberConfirmed", nullable = false)
	public boolean isPhoneNumberConfirmed() {
		return this.phoneNumberConfirmed;
	}

	public void setPhoneNumberConfirmed(boolean phoneNumberConfirmed) {
		this.phoneNumberConfirmed = phoneNumberConfirmed;
	}

	@Column(name = "TwoFactorEnabled", nullable = false)
	public boolean isTwoFactorEnabled() {
		return this.twoFactorEnabled;
	}

	public void setTwoFactorEnabled(boolean twoFactorEnabled) {
		this.twoFactorEnabled = twoFactorEnabled;
	}

	@Column(name = "LockoutEnd")
	public Serializable getLockoutEnd() {
		return this.lockoutEnd;
	}

	public void setLockoutEnd(Serializable lockoutEnd) {
		this.lockoutEnd = lockoutEnd;
	}

	@Column(name = "LockoutEnabled", nullable = false)
	public boolean isLockoutEnabled() {
		return this.lockoutEnabled;
	}

	public void setLockoutEnabled(boolean lockoutEnabled) {
		this.lockoutEnabled = lockoutEnabled;
	}

	@Column(name = "AccessFailedCount", nullable = false)
	public int getAccessFailedCount() {
		return this.accessFailedCount;
	}

	public void setAccessFailedCount(int accessFailedCount) {
		this.accessFailedCount = accessFailedCount;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aspNetUsers")
	public Set<AspNetUserLogins> getAspNetUserLogins() {
		return this.aspNetUserLogins;
	}

	public void setAspNetUserLogins(Set<AspNetUserLogins>aspNetUserLogins) {
		this.aspNetUserLogins = aspNetUserLogins;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "aspNetUsers")
	public Set<AspNetUserClaims> getAspNetUserClaims() {
		return this.aspNetUserClaims;
	}

	public void setAspNetUserClaims(Set<AspNetUserClaims> aspNetUserClaims) {
		this.aspNetUserClaims = aspNetUserClaims;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "AspNetUserRoles", schema = "dbo", catalog = "onlineaccounting", joinColumns = {
			@JoinColumn(name = "UserId", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "RoleId", nullable = false, updatable = false) })
	public Set<AspNetRoles> getAspNetRoles() {
		return this.aspNetRoles;
	}

	public void setAspNetRoles(Set<AspNetRoles> aspNetRoles) {
		this.aspNetRoles = aspNetRoles;
	}

}
